// src/controllers/chatbotController.js

const pool = require('../config/db');

/**
 * Procesar consulta del chatbot y generar respuesta inteligente
 */
const procesarConsulta = async (req, res) => {
    try {
        const { mensaje, idEmpresa = 1, idUsuario = null } = req.body;

        if (!mensaje || mensaje.trim() === '') {
            return res.status(400).json({ 
                message: 'El mensaje es requerido',
                respuesta: 'Por favor, escribe tu consulta.'
            });
        }

        // Analizar el mensaje y determinar la intenci√≥n
        const intencion = analizarIntencion(mensaje.toLowerCase());
        
        // Generar respuesta basada en la intenci√≥n y datos reales
        const respuesta = await generarRespuesta(intencion, mensaje, idEmpresa);

        // Registrar la interacci√≥n para an√°lisis posterior
        await registrarInteraccion(mensaje, respuesta, idEmpresa, idUsuario);

        res.json({
            success: true,
            intencion: intencion.tipo,
            respuesta: respuesta,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Error en procesarConsulta:', error);
        res.status(500).json({ 
            message: 'Error del servidor',
            respuesta: 'Lo siento, ocurri√≥ un error procesando tu consulta. Por favor intenta de nuevo.'
        });
    }
};

/**
 * Analizar la intenci√≥n del mensaje del usuario
 */
function analizarIntencion(mensaje) {
    const intenciones = {
        saludo: {
            palabras: ['hola', 'buenos', 'buenas', 'saludos', 'hey', 'hi'],
            tipo: 'saludo'
        },
        conductores: {
            palabras: ['conductor', 'conductores', 'chofer', 'choferes', 'driver'],
            tipo: 'conductores'
        },
        vehiculos: {
            palabras: ['vehiculo', 'vehiculos', 'veh√≠culo', 'veh√≠culos', 'bus', 'buses', 'auto', 'carro', 'flota'],
            tipo: 'vehiculos'
        },
        rutas: {
            palabras: ['ruta', 'rutas', 'recorrido', 'recorridos', 'trayecto', 'itinerario'],
            tipo: 'rutas'
        },
        horarios: {
            palabras: ['horario', 'horarios', 'tiempo', 'hora', 'programacion', 'cronograma'],
            tipo: 'horarios'
        },
        estado: {
            palabras: ['estado', 'estatus', 'situacion', 'condicion', 'disponible', 'activo', 'inactivo'],
            tipo: 'estado'
        },
        reportes: {
            palabras: ['reporte', 'reportes', 'informe', 'informes', 'estadistica', 'estadisticas', 'datos'],
            tipo: 'reportes'
        },
        vencimientos: {
            palabras: ['vencimiento', 'vencimientos', 'expira', 'caduca', 'licencia', 'soat', 'tecnica'],
            tipo: 'vencimientos'
        },
        ayuda: {
            palabras: ['ayuda', 'help', 'que puedes hacer', 'opciones', 'menu', 'funciones'],
            tipo: 'ayuda'
        },
        despedida: {
            palabras: ['gracias', 'thanks', 'adios', 'bye', 'chao', 'hasta luego'],
            tipo: 'despedida'
        }
    };

    // Buscar coincidencias
    for (const [key, intencion] of Object.entries(intenciones)) {
        if (intencion.palabras.some(palabra => mensaje.includes(palabra))) {
            return { tipo: intencion.tipo, confianza: 0.8 };
        }
    }

    return { tipo: 'desconocido', confianza: 0.1 };
}

/**
 * Generar respuesta basada en la intenci√≥n y datos reales
 */
async function generarRespuesta(intencion, mensaje, idEmpresa) {
    try {
        switch (intencion.tipo) {
            case 'saludo':
                return await responderSaludo();

            case 'conductores':
                return await responderConductores(mensaje, idEmpresa);

            case 'vehiculos':
                return await responderVehiculos(mensaje, idEmpresa);

            case 'rutas':
                return await responderRutas(mensaje, idEmpresa);

            case 'horarios':
                return await responderHorarios(mensaje, idEmpresa);

            case 'estado':
                return await responderEstado(mensaje, idEmpresa);

            case 'reportes':
                return await responderReportes(mensaje, idEmpresa);

            case 'vencimientos':
                return await responderVencimientos(mensaje, idEmpresa);

            case 'ayuda':
                return responderAyuda();

            case 'despedida':
                return responderDespedida();

            default:
                return responderDesconocido();
        }
    } catch (error) {
        console.error('Error generando respuesta:', error);
        return 'Lo siento, no pude procesar tu consulta en este momento. Por favor contacta al administrador del sistema.';
    }
}

/**
 * Respuestas espec√≠ficas por tipo
 */
async function responderSaludo() {
    const saludos = [
        '¬°Hola! Soy tu asistente virtual de TransSync. ¬øEn qu√© puedo ayudarte hoy?',
        '¬°Buenos d√≠as! Estoy aqu√≠ para ayudarte con informaci√≥n sobre conductores, veh√≠culos, rutas y m√°s.',
        '¬°Saludos! ¬øQu√© informaci√≥n necesitas del sistema TransSync?'
    ];
    return saludos[Math.floor(Math.random() * saludos.length)];
}

async function responderConductores(mensaje, idEmpresa) {
    try {
        const [estadisticas] = await pool.query(`
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN estConductor = 'ACTIVO' THEN 1 ELSE 0 END) as activos,
                SUM(CASE WHEN estConductor = 'INACTIVO' THEN 1 ELSE 0 END) as inactivos,
                SUM(CASE WHEN v.idConductorAsignado IS NOT NULL THEN 1 ELSE 0 END) as conVehiculo
            FROM Conductores c
            LEFT JOIN Vehiculos v ON c.idConductor = v.idConductorAsignado
            WHERE c.idEmpresa = ?
        `, [idEmpresa]);

        const stats = estadisticas[0];
        
        if (mensaje.includes('activo') || mensaje.includes('disponible')) {
            return `üìä **Estado de Conductores:**\n‚Ä¢ **Activos:** ${stats.activos} conductores\n‚Ä¢ **Con veh√≠culo asignado:** ${stats.conVehiculo}\n‚Ä¢ **Disponibles:** ${stats.activos - stats.conVehiculo}\n\nPuedes consultar m√°s detalles en la secci√≥n Conductores del panel principal.`;
        }

        return `üë®‚Äçüíº **Resumen de Conductores:**\n‚Ä¢ **Total:** ${stats.total} conductores registrados\n‚Ä¢ **Activos:** ${stats.activos}\n‚Ä¢ **Inactivos:** ${stats.inactivos}\n‚Ä¢ **Con veh√≠culo asignado:** ${stats.conVehiculo}\n\n¬øTe interesa informaci√≥n espec√≠fica sobre licencias o asignaciones?`;
    } catch (error) {
        return 'No pude acceder a la informaci√≥n de conductores en este momento. Verifica tu conexi√≥n o contacta al administrador.';
    }
}

async function responderVehiculos(mensaje, idEmpresa) {
    try {
        const [estadisticas] = await pool.query(`
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN estVehiculo = 'DISPONIBLE' THEN 1 ELSE 0 END) as disponibles,
                SUM(CASE WHEN estVehiculo = 'EN_RUTA' THEN 1 ELSE 0 END) as enRuta,
                SUM(CASE WHEN estVehiculo = 'EN_MANTENIMIENTO' THEN 1 ELSE 0 END) as enMantenimiento,
                SUM(CASE WHEN idConductorAsignado IS NOT NULL THEN 1 ELSE 0 END) as conConductor
            FROM Vehiculos
            WHERE idEmpresa = ?
        `, [idEmpresa]);

        const stats = estadisticas[0];

        if (mensaje.includes('disponible') || mensaje.includes('libre')) {
            return `üöå **Veh√≠culos Disponibles:**\n‚Ä¢ **Disponibles:** ${stats.disponibles} veh√≠culos\n‚Ä¢ **En ruta:** ${stats.enRuta}\n‚Ä¢ **En mantenimiento:** ${stats.enMantenimiento}\n\nConsulta el panel de Veh√≠culos para ver detalles espec√≠ficos de cada unidad.`;
        }

        return `üöó **Estado de la Flota:**\n‚Ä¢ **Total:** ${stats.total} veh√≠culos\n‚Ä¢ **Disponibles:** ${stats.disponibles}\n‚Ä¢ **En ruta:** ${stats.enRuta}\n‚Ä¢ **En mantenimiento:** ${stats.enMantenimiento}\n‚Ä¢ **Con conductor:** ${stats.conConductor}\n\n¬øNecesitas informaci√≥n sobre mantenimientos o asignaciones?`;
    } catch (error) {
        return 'No pude acceder a la informaci√≥n de veh√≠culos. Por favor intenta m√°s tarde.';
    }
}

async function responderRutas(mensaje, idEmpresa) {
    try {
        const [rutas] = await pool.query(`
            SELECT nomRuta, oriRuta, desRuta
            FROM Rutas 
            WHERE idEmpresa = ?
            LIMIT 10
        `, [idEmpresa]);

        if (rutas.length === 0) {
            return 'üìç No hay rutas registradas en el sistema para tu empresa.';
        }

        let respuesta = `üìç **Rutas Registradas (${rutas.length}):**\n\n`;
        rutas.forEach((ruta, index) => {
            respuesta += `${index + 1}. **${ruta.nomRuta}**\n   üìç ${ruta.oriRuta} ‚Üí ${ruta.desRuta}\n\n`;
        });

        respuesta += 'Consulta la secci√≥n Rutas para ver mapas interactivos y m√°s detalles.';
        return respuesta;
    } catch (error) {
        return 'No pude acceder a la informaci√≥n de rutas. Verifica tu conexi√≥n.';
    }
}

async function responderHorarios(mensaje, idEmpresa) {
    try {
        const [viajes] = await pool.query(`
            SELECT 
                COUNT(*) as totalViajes,
                SUM(CASE WHEN estViaje = 'PROGRAMADO' THEN 1 ELSE 0 END) as programados,
                SUM(CASE WHEN estViaje = 'EN_CURSO' THEN 1 ELSE 0 END) as enCurso,
                SUM(CASE WHEN DATE(fecHorSalViaje) = CURDATE() THEN 1 ELSE 0 END) as hoy
            FROM Viajes v
            JOIN Vehiculos ve ON v.idVehiculo = ve.idVehiculo
            WHERE ve.idEmpresa = ?
        `, [idEmpresa]);

        const stats = viajes[0];
        
        return `‚è∞ **Programaci√≥n de Viajes:**\n‚Ä¢ **Total programados:** ${stats.programados}\n‚Ä¢ **En curso:** ${stats.enCurso}\n‚Ä¢ **Viajes de hoy:** ${stats.hoy}\n\nVisita la secci√≥n Horarios para programar nuevos viajes o consultar la agenda completa.`;
    } catch (error) {
        return '‚è∞ La informaci√≥n de horarios no est√° disponible moment√°neamente. Consulta directamente en el panel de Horarios.';
    }
}

async function responderEstado(mensaje, idEmpresa) {
    try {
        const [resumen] = await pool.query(`
            SELECT 
                (SELECT COUNT(*) FROM Conductores WHERE idEmpresa = ? AND estConductor = 'ACTIVO') as conductoresActivos,
                (SELECT COUNT(*) FROM Vehiculos WHERE idEmpresa = ? AND estVehiculo = 'DISPONIBLE') as vehiculosDisponibles,
                (SELECT COUNT(*) FROM Viajes v JOIN Vehiculos ve ON v.idVehiculo = ve.idVehiculo WHERE ve.idEmpresa = ? AND v.estViaje = 'EN_CURSO') as viajesEnCurso
        `, [idEmpresa, idEmpresa, idEmpresa]);

        const stats = resumen[0];

        return `üìä **Estado General del Sistema:**\n\nüü¢ **Conductores activos:** ${stats.conductoresActivos}\nüü¢ **Veh√≠culos disponibles:** ${stats.vehiculosDisponibles}\nüîµ **Viajes en curso:** ${stats.viajesEnCurso}\n\nTodo funcionando correctamente. Consulta cada secci√≥n para m√°s detalles espec√≠ficos.`;
    } catch (error) {
        return 'üìä No puedo acceder al estado general en este momento. Verifica las secciones individuales del sistema.';
    }
}

async function responderVencimientos(mensaje, idEmpresa) {
    try {
        const [licencias] = await pool.query(`
            SELECT COUNT(*) as count
            FROM Conductores 
            WHERE idEmpresa = ? 
            AND fecVenLicConductor <= DATE_ADD(CURDATE(), INTERVAL 30 DAY)
            AND fecVenLicConductor >= CURDATE()
        `, [idEmpresa]);

        const [vehiculos] = await pool.query(`
            SELECT COUNT(*) as count
            FROM Vehiculos 
            WHERE idEmpresa = ? 
            AND (
                fecVenSOAT <= DATE_ADD(CURDATE(), INTERVAL 30 DAY) OR
                fecVenTec <= DATE_ADD(CURDATE(), INTERVAL 30 DAY)
            )
        `, [idEmpresa]);

        const licenciasVencen = licencias[0].count;
        const vehiculosVencen = vehiculos[0].count;

        if (licenciasVencen === 0 && vehiculosVencen === 0) {
            return '‚úÖ **Vencimientos:** ¬°Perfecto! No hay documentos pr√≥ximos a vencer en los pr√≥ximos 30 d√≠as.';
        }

        let respuesta = '‚ö†Ô∏è **Alertas de Vencimiento (pr√≥ximos 30 d√≠as):**\n\n';
        if (licenciasVencen > 0) {
            respuesta += `ü™™ **${licenciasVencen} licencias de conducir** pr√≥ximas a vencer\n`;
        }
        if (vehiculosVencen > 0) {
            respuesta += `üöó **${vehiculosVencen} veh√≠culos** con documentos pr√≥ximos a vencer\n`;
        }
        respuesta += '\nRevisa las secciones correspondientes para tomar las acciones necesarias.';

        return respuesta;
    } catch (error) {
        return '‚ö†Ô∏è No pude verificar los vencimientos. Consulta directamente las secciones de Conductores y Veh√≠culos.';
    }
}

async function responderReportes(mensaje, idEmpresa) {
    return `üìä **Reportes Disponibles:**\n\n‚Ä¢ **Dashboard Principal:** M√©tricas en tiempo real\n‚Ä¢ **Informes de Conductores:** Rendimiento y estad√≠sticas\n‚Ä¢ **Reportes de Flota:** Estado y utilizaci√≥n de veh√≠culos\n‚Ä¢ **An√°lisis de Rutas:** Eficiencia y tiempos\n‚Ä¢ **Reportes de Mantenimiento:** Historial y programaci√≥n\n\nAccede a la secci√≥n Informes para generar reportes detallados y exportar datos.`;
}

function responderAyuda() {
    return `üîß **¬øEn qu√© puedo ayudarte?**\n\nPuedo proporcionarte informaci√≥n sobre:\n\nüöó **Veh√≠culos:** Estado, disponibilidad, mantenimiento\nüë®‚Äçüíº **Conductores:** Disponibilidad, licencias, asignaciones\nüìç **Rutas:** Recorridos registrados y programaci√≥n\n‚è∞ **Horarios:** Viajes programados y en curso\nüìä **Reportes:** Estad√≠sticas y an√°lisis del sistema\n‚ö†Ô∏è **Vencimientos:** Alertas de documentos pr√≥ximos a vencer\n\n**Ejemplos de consultas:**\n‚Ä¢ "¬øCu√°ntos conductores est√°n activos?"\n‚Ä¢ "Mu√©strame el estado de los veh√≠culos"\n‚Ä¢ "¬øHay licencias por vencer?"\n‚Ä¢ "¬øQu√© rutas tenemos disponibles?"`;
}

function responderDespedida() {
    const despedidas = [
        '¬°De nada! Estoy aqu√≠ cuando necesites informaci√≥n del sistema TransSync.',
        '¬°Perfecto! No dudes en consultarme cuando requieras datos actualizados.',
        '¬°Hasta pronto! Estar√© disponible para ayudarte con el sistema.'
    ];
    return despedidas[Math.floor(Math.random() * despedidas.length)];
}

function responderDesconocido() {
    return `ü§î No entend√≠ completamente tu consulta. \n\n**Puedo ayudarte con:**\n‚Ä¢ Estado de conductores y veh√≠culos\n‚Ä¢ Informaci√≥n de rutas y horarios\n‚Ä¢ Reportes y estad√≠sticas\n‚Ä¢ Alertas de vencimientos\n\n**Prueba preguntando:**\n‚Ä¢ "¬øCu√°ntos conductores est√°n disponibles?"\n‚Ä¢ "Muestra el estado de la flota"\n‚Ä¢ "¬øHay documentos por vencer?"\n\nO simplemente escribe "ayuda" para ver todas mis funciones.`;
}

/**
 * Registrar interacci√≥n para an√°lisis posterior
 */
async function registrarInteraccion(mensaje, respuesta, idEmpresa, idUsuario) {
    try {
        // Crear tabla de interacciones si no existe (opcional)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS InteraccionesChatbot (
                idInteraccion INT AUTO_INCREMENT PRIMARY KEY,
                mensaje TEXT NOT NULL,
                respuesta TEXT NOT NULL,
                idEmpresa INT,
                idUsuario INT NULL,
                fechaInteraccion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_empresa (idEmpresa),
                INDEX idx_fecha (fechaInteraccion)
            )
        `);

        await pool.query(`
            INSERT INTO InteraccionesChatbot (mensaje, respuesta, idEmpresa, idUsuario)
            VALUES (?, ?, ?, ?)
        `, [mensaje, respuesta, idEmpresa, idUsuario]);

    } catch (error) {
        // No fallar si no se puede registrar la interacci√≥n
        console.log('No se pudo registrar la interacci√≥n:', error.message);
    }
}

/**
 * Obtener estad√≠sticas de uso del chatbot
 */
const getEstadisticasChatbot = async (req, res) => {
    try {
        const { idEmpresa = 1, dias = 30 } = req.query;

        const [stats] = await pool.query(`
            SELECT 
                COUNT(*) as totalInteracciones,
                COUNT(DISTINCT DATE(fechaInteraccion)) as diasActivos,
                AVG(CHAR_LENGTH(mensaje)) as promedioLongitudMensaje,
                DATE(fechaInteraccion) as fecha,
                COUNT(*) as interaccionesPorDia
            FROM InteraccionesChatbot 
            WHERE idEmpresa = ? 
            AND fechaInteraccion >= DATE_SUB(CURDATE(), INTERVAL ? DAY)
            GROUP BY DATE(fechaInteraccion)
            ORDER BY fecha DESC
        `, [idEmpresa, dias]);

        res.json({
            success: true,
            estadisticas: stats,
            periodo: `${dias} d√≠as`
        });

    } catch (error) {
        console.error('Error obteniendo estad√≠sticas del chatbot:', error);
        res.status(500).json({ 
            message: 'Error obteniendo estad√≠sticas',
            estadisticas: []
        });
    }
};

module.exports = {
    procesarConsulta,
    getEstadisticasChatbot
};