// src/routes/conductoresRoutes.js

const express = require('express');
const router = express.Router();
const conductoresController = require('../controllers/conductoresController');
const authMiddleware = require('../middleware/authMiddleware');
const allowRoles = require('../middleware/roleMiddleware');

// üîê Middleware de autenticaci√≥n para TODAS las rutas
router.use(authMiddleware);

// ‚ö†Ô∏è Importante: las rutas espec√≠ficas SIEMPRE van antes de las gen√©ricas (/:id)

// üëâ Obtener conductores disponibles para asignaci√≥n (ADMINISTRADOR, SUPERADMIN)
router.get(
  '/disponibles',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.getConductoresDisponibles
);

// üëâ Obtener estad√≠sticas de conductores (ADMINISTRADOR, SUPERADMIN)
router.get(
  '/estadisticas',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.getEstadisticasConductores
);

// üëâ Verificar vencimiento de licencias (ADMINISTRADOR, SUPERADMIN)
router.get(
  '/licencias/vencimiento',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.verificarVencimientoLicencias
);

// üëâ Obtener todos los conductores (ADMINISTRADOR, SUPERADMIN)
router.get(
  '/',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.getConductores
);

// üëâ Crear nuevo conductor (ADMINISTRADOR, SUPERADMIN)
router.post(
  '/',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.crearConductor
);

// ---------- Rutas gen√©ricas con par√°metro (:id) ----------

// üëâ Obtener conductor por ID (ADMINISTRADOR, SUPERADMIN)
router.get(
  '/:id',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.getConductorById
);

// üëâ Actualizar conductor (ADMINISTRADOR, SUPERADMIN)
router.put(
  '/:id',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.actualizarConductor
);

// üëâ Eliminar conductor (SOLO SUPERADMIN)
router.delete(
  '/:id',
  allowRoles('SUPERADMIN'),
  conductoresController.eliminarConductor
);

// üëâ Cambiar estado de conductor (ADMINISTRADOR, SUPERADMIN)
router.patch(
  '/:id/estado',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.cambiarEstadoConductor
);

// üëâ Asignar veh√≠culo a conductor (ADMINISTRADOR, SUPERADMIN)
router.patch(
  '/:id/asignar-vehiculo',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.asignarVehiculoConductor
);

// üëâ Desasignar veh√≠culo de conductor (ADMINISTRADOR, SUPERADMIN)
router.patch(
  '/:id/desasignar-vehiculo',
  allowRoles('ADMINISTRADOR', 'SUPERADMIN'),
  conductoresController.desasignarVehiculoConductor
);

module.exports = router;
